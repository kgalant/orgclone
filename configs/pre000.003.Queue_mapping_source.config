# Queue_mapping_source.config

# Label for the job that will be displayed
JOBDESC:Queue_mapping_source

#The object we're dealing with (as in the local database)
OBJECT:Group

#The SF object we're dealing with (as in the SF org)
ENTITY:Group

#Fields that will be extracted from source org and loaded into local database
FIELDSTRING:Id, Name

# The SOQL that will be used to run the extraction from source org to populate FILENAME (must contain the same fields, no more no less, as FIELDSTRING)
SOQL:SELECT Id,Name FROM Group WHERE Type = 'Queue'

# the fields (which must be present in FIELDSTRING and SOQL) that will be remapped to new IDs using the mapping table in the local database
FIELDSTOREMAP:

# The file where remapped data exported from the local db will be placed to be loaded into target org
MAPPEDFILENAME:


# The mapping file required by the Apex Data Loader for insert/upsert operations
SFMAPPINGFILE:

# The SOQL that will be used to extract mapping data (Id, OldId__c, a label field for convenience) from the target org
# E.g. the MAPPINGSOQL=SELECT Id, oldid__c, name FROM account would generate entries like oldid# 0012000001ALLIa Id# 0012000001xaCxb tablekey# account_Jack Papadakis DDS
# in the mapping table in the database. The name field (third item in SELECT list need not be unique, but must be provided)
MAPPINGSOQL:

# The file which will be populated from the target org using the MAPPINGSOQL
SOURCEFILENAME:%BASEFILEDIR%Queue\Queue_mapping_source.csv
TARGETFILENAME:%BASEFILEDIR%Queue\Queue_mapping_target.csv

# First extra SQL statement to be run when data is in the database
SQLFIRST:CREATE LOCAL TEMPORARY TABLE mapping_full_temp (   itemid VARCHAR(18),  tablekey VARCHAR(255) )  ON COMMIT PRESERVE ROWS;  COPY mapping_full_temp (itemid, tablekey) FROM '%BASEFILEDIR%Queue\Queue_mapping_source.csv' DELIMITER ',' CSV ENCODING 'UTF-8' NULL '' HEADER; UPDATE mapping_master SET wellspectid = mft.itemid FROM ( select itemid, tablekey FROM mapping_full_temp ) mft WHERE mapping_master.tablekey = 'Queue_' || mft.tablekey; INSERT INTO mapping_master(dentsplyid, tablekey) select itemid, 'Queue_' || tablekey FROM mapping_full_temp WHERE itemid in ( SELECT itemid FROM ( select t.itemid, t.tablekey, m.tablekey from mapping_full_temp t left join mapping_master m on (t.itemid = m.dentsplyid) WHERE m.tablekey is null ) q1 );  DROP TABLE mapping_full_temp;

SQLSECOND:CREATE LOCAL TEMPORARY TABLE mapping_full_temp (   itemid VARCHAR(18),  tablekey VARCHAR(255) )  ON COMMIT PRESERVE ROWS;  COPY mapping_full_temp (itemid, tablekey) FROM '%BASEFILEDIR%Queue\Queue_mapping_target.csv' DELIMITER ',' CSV ENCODING 'UTF-8' NULL '' HEADER;  UPDATE mapping_master SET wellspectid = mft.itemid FROM ( select itemid, tablekey FROM mapping_full_temp ) mft WHERE mapping_master.tablekey = 'Queue_' || mft.tablekey; DELETE FROM mapping_master WHERE tablekey like 'Queue_%' AND ((dentsplyid is null or dentsplyid='') OR  (wellspectid is null or wellspectid='')); DROP TABLE mapping_full_temp;

# Export from source system
# Uses OBJECT, ENTITY, SOQL, FILENAME
# Generates/overwrites FILENAME using SOQL
EXP:0
DOFIRSTSQL:1
EXPTARGET:0
DOSECONDSQL:1
